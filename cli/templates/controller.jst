/**
 * Controller: {{= data.name }}
 *
 * @author {{=data.author }}
 * @since {{=data.since }}  
 */
module.exports = (function() {
  'use strict';
  
  const Nodal = require('nodal');{{? data.for }}
  const {{= data.for.name }} = Nodal.require('{{= data.for.path }}');{{?}}
  
  class {{= data.name }} extends Nodal.Controller {
  {{? data.for }}
   /**
    * Method: Index (get all)       
    */
    index() {
      {{= data.for.name }}.query()
        .where(this.params.query)
        .end((err, models) => {
          this.respond(err || models);
        });
    }
    /**
     * Method: Show (get by id)       
     */
    show() {
      {{= data.for.name }}.find(this.params.route.id, (err, model) => {
        this.respond(err || model);
      });
    }
    /**
     * Method:  Create (post)       
     */
    create() {
      {{= data.for.name }}.create(this.params.body, (err, model) => {
        this.respond(err || model);
      });
    }
    /**
     * Method: Update (put) 
     */
    update() {
      {{= data.for.name }}.update(this.params.route.id, this.params.body, (err, model) => {
        this.respond(err || model);
      });
    }
    /**
     * Method: Destroy (del)      
     */
    destroy() {
      {{= data.for.name }}.destroy(this.params.route.id, (err, model) => {
        this.respond(err || model);
      });
    }
    {{??}}

    get() {
      this.respond({message: `GET request to ${this.constructor.name}`});
    }
    
    post() {
      this.badRequest();
    }

    put() {
      this.badRequest();
    }

    del() {
      this.badRequest();
    }{{?}}
  }

  return {{= data.name }};

})();
