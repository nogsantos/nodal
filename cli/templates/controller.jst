'use strict';
const Nodal = require('nodal');{{? data.for }}
const {{= data.for.name }} = Nodal.require('{{= data.for.path }}');{{?}}
/**
 * Controller: {{= data.name }}
 *
 * @author {{=data.author }}
 * @since {{=data.since }}  
 */ 
class {{= data.name }} extends Nodal.Controller {
  {{? data.for }}
   /**
    * Method: GET
    */
    index() {
        {{= data.for.name }}.query()
        .where(this.params.query)
        .end((err, models) => {
            this.respond(err || models);
        });
    }
    /**
     * Method: GET BY ID   
     */
    show() {
        {{= data.for.name }}.find(this.params.route.id, (err, model) => {
            this.respond(err || model);
        });
    }
    /**
     * Method: POST
     */
    create() {
        {{= data.for.name }}.create(this.params.body, (err, model) => {
            this.respond(err || model);
        });
    }
    /**
     * Method: PUT
     */
    update() {
        {{= data.for.name }}.update(this.params.route.id, this.params.body, (err, model) => {
            this.respond(err || model);
        });
    }
    /**
     * Method: DELETE
     */
    del() {
        {{= data.for.name }}.destroy(this.params.route.id, (err, model) => {
            this.respond(err || model);
        });
    }
    {{??}}
    /**
     * Method: GET
     */
    get() {
        this.respond({message: `service.its.alive`});
    }
    /**
     * Method: POST
     */
    post() {
        this.respond({message: `service.its.alive`});
    }
    /**
     * Method: PUT
     */
    put() {
        this.respond({message: `service.its.alive`});
    }
    /**
     * Method: DELETE
     */
    del() {
        this.respond({message: `service.its.alive`});
    }{{?}}
}
module.exports = {{= data.name }};
